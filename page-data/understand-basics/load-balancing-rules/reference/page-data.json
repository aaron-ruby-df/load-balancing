{"componentChunkName":"component---src-components-mdx-custom-renderer-js","path":"/understand-basics/load-balancing-rules/reference","result":{"data":{"mdx":{"id":"faadc0eb-4316-56af-b923-872ea5236500","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Supported fields and operators\",\n  \"order\": 50,\n  \"type\": \"table\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Type = makeShortcode(\"Type\");\nvar TableWrap = makeShortcode(\"TableWrap\");\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"supported-fields-and-operators\"\n  }, \"Supported fields and operators\"), mdx(\"h2\", {\n    \"id\": \"fields\"\n  }, \"Fields\"), mdx(\"p\", null, \"Load Balancing expressions support these fields:\"), mdx(\"table\", {\n    style: {\n      \"width\": \"100%\"\n    }\n  }, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", {\n    style: {\n      \"width\": \"40%\"\n    }\n  }, \"Field\"), mdx(\"th\", {\n    style: {\n      \"width\": \"20%\"\n    }\n  }, \"Name in Expression Builder\"), mdx(\"th\", null, \"Description\"))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", null, \"http.request.version\"), mdx(\"br\", null), mdx(Type, {\n    mdxType: \"Type\"\n  }, \"Number\")), mdx(\"td\", null, \"HTTP version\"), mdx(\"td\", null, mdx(\"p\", null, \"The version of the HTTP protocol used. Use this field when you require different checks for different versions.\"), mdx(\"p\", null, \"Example Values:\", mdx(\"ul\", null, mdx(\"li\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"HTTP/1.1\")), mdx(\"li\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"HTTP/3\")))))), mdx(\"tr\", null, mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", null, \"ip.src\"), mdx(\"br\", null), mdx(Type, {\n    mdxType: \"Type\"\n  }, \"IP\\xA0address\")), mdx(\"td\", null, \"IP address\"), mdx(\"td\", null, mdx(\"p\", null, \"The client TCP IP address, which may be adjusted to reflect the actual address of the client by using, for example, HTTP headers such as\", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"X-Forwarded-For\"), \" or \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"X-Real-IP\"), \".\"), mdx(\"p\", null, \"Example value:\", mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"93.184.216.34\")))), mdx(\"tr\", null, mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", null, \"http.request.uri\"), mdx(\"br\", null), mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\")), mdx(\"td\", null, \"URI\"), mdx(\"td\", null, mdx(\"p\", null, \"The absolute URI of the request.\"), mdx(\"p\", null, \"Example value:\", mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"/articles/index?section=539061&expand=comments\")))), mdx(\"tr\", null, mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", null, \"http.request.uri.path\"), mdx(\"br\", null), mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\")), mdx(\"td\", null, \"URI path\"), mdx(\"td\", null, mdx(\"p\", null, \"The URI path of the request.\"), mdx(\"p\", null, \"Example value:\", mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"/articles/index\")))), mdx(\"tr\", null, mdx(\"td\", {\n    valign: \"top\"\n  }, mdx(\"code\", {\n    className: true\n  }, \"http.request.uri.query\"), mdx(\"br\", null), mdx(Type, {\n    mdxType: \"Type\"\n  }, \"String\")), mdx(\"td\", null, \"URI query string\"), mdx(\"td\", null, mdx(\"p\", null, \"The entire query string for the request, without the \", mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"?\"), \" delimiter.\"), mdx(\"p\", null, \"Example value:\", mdx(\"br\", null), mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"section=539061&expand=comments\")))))), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"operators\"\n  }, \"Operators\"), mdx(\"h3\", {\n    \"id\": \"overview\"\n  }, \"Overview\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#comparison-operators\"\n  }, \"Comparison operators\"), \" specify how values defined in an expression must relate to the actual HTTP request value for the expression to return true.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#logical-operators\"\n  }, \"Logical operators\"), \" combine two expressions to form a compound expression and use order of precedence to determine how an expression is evaluated.\"), mdx(\"p\", null, \"Load Balancing expressions also support grouping symbols, which allow you to organize expressions, enforce operator precedence, and nest expressions. For examples and usage, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/load-balancing/cf-firewall-language/operators/#grouping-symbols\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Grouping symbols\")), \" in the Firewall Rules documentation.\"), mdx(\"h3\", {\n    \"id\": \"comparison-operators\"\n  }, \"Comparison operators\"), mdx(\"p\", null, \"Comparison operators return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" when a value from an HTTP request matches a value defined in an expression.\"), mdx(\"p\", null, \"This is the general pattern for using comparison operators:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"<field> <comparison operator> <value>\\n\")), mdx(\"p\", null, \"Load Balancing expressions support these comparison operators:\"), mdx(TableWrap, {\n    style: {\n      \"width\": \"100%\"\n    },\n    mdxType: \"TableWrap\"\n  }, mdx(\"table\", {\n    style: {\n      \"width\": \"100%\"\n    }\n  }, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", null, \"Name\"), mdx(\"th\", null, \"Operator Notation\"), mdx(\"th\", {\n    colSpan: \"3\",\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"Supported Data Types\"), mdx(\"th\", null, \"Example (operator in bold)\")), mdx(\"tr\", null, mdx(\"td\", null), mdx(\"td\", null), mdx(\"th\", null, \"String\"), mdx(\"th\", null, \"IP\"), mdx(\"th\", null, \"Rules list\"), mdx(\"th\", null))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", null, \"Equal\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"eq\")), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"http.request.uri.path \", mdx(\"strong\", null, \"eq\"), \" \\\"/articles/2008/\\\"\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Not equal\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"ne\")), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"ip.src \", mdx(\"strong\", null, \"ne\"), \" 93.184.216.0\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Exactly\", mdx(\"br\", null), \"contains\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"contains\")), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, \"\\u274C\"), mdx(\"td\", null, \"\\u274C\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"http.request.uri.path \", mdx(\"strong\", null, \"contains\"), \" \\\"/articles/\\\"\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Matches\", mdx(\"br\", null), \"RE2 regex\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"matches\")), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, \"\\u274C\"), mdx(\"td\", null, \"\\u274C\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"http.request.uri.path \", mdx(\"strong\", null, \"matches\"), \" \\\"^/articles/200[7-8]/$\\\"\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Value is in \", mdx(\"br\", null), \"a set of values\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"in\")), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, \"\\u2705\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"ip.src \", mdx(\"strong\", null, \"in\"), \" \", '{ 93.184.216.0 93.184.216.1 }')))))), mdx(Aside, {\n    type: \"warning\",\n    header: \"Important\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matches\"), \" operator requires a Cloudflare Business or Enterprise plan.\")), mdx(\"h3\", {\n    \"id\": \"logical-operators\"\n  }, \"Logical operators\"), mdx(\"p\", null, \"Logical operators combine two or more expressions into a single compound expression. A compound expression has this general syntax:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"<expression> <logical operator> <expression>\\n\")), mdx(\"p\", null, \"Each logical operator has an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#order-of-precedence\"\n  }, \"order of precedence\"), \". The order of precedence (along with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#grouping-symbols\"\n  }, \"grouping symbols\"), \") determines the order in which Cloudflare evaluates logical operators in an expression. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"not\"), \" operator ranks first in order of precedence. For more on how Cloudflare evaluates logical operators in expressions, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-language/operators#order-of-precedence\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Order of precedence\")), \" in the Firewall Rules documentation.\"), mdx(\"p\", null, \"Load Balancing expressions support these logical operators:\"), mdx(TableWrap, {\n    mdxType: \"TableWrap\"\n  }, mdx(\"table\", {\n    style: {\n      \"width\": \"100%\"\n    }\n  }, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", null, \"Name\"), mdx(\"th\", null, \"English\", mdx(\"br\", null), \"Notation\"), mdx(\"th\", null, \"C-like\", mdx(\"br\", null), \"Notation\"), mdx(\"th\", null, \"Example\"), mdx(\"th\", null, \"Order of Precedence\"))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", null, \"Logical NOT\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"not\")), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"!\")), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, mdx(\"strong\", null, \"not\"), \" ( http.host eq \\\"www.cloudflare.com\\\" and ip.src in 93.184.216.0/24 )\")), mdx(\"td\", null, \"1\")), mdx(\"tr\", null, mdx(\"td\", null, \"Logical AND\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"and\")), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"&&\")), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"http.host eq \\\"www.cloudflare.com\\\" \", mdx(\"strong\", null, \"and\"), \" ip.src in 93.184.216.0/24\")), mdx(\"td\", null, \"2\")), mdx(\"tr\", null, mdx(\"td\", null, \"Logical XOR\", mdx(\"br\", null), \"(exclusive OR)\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"xor\")), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"^^\")), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"http.host eq \\\"www.cloudflare.com\\\" \", mdx(\"strong\", null, \"xor\"), \" ip.src in 93.184.216.0/24\")), mdx(\"td\", null, \"3\")), mdx(\"tr\", null, mdx(\"td\", null, \"Logical OR\"), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"or\")), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"||\")), mdx(\"td\", null, mdx(\"code\", {\n    className: \"InlineCode\"\n  }, \"http.host eq \\\"www.cloudflare.com\\\" \", mdx(\"strong\", null, \"or\"), \" ip.src in 93.184.216.0/24\")), mdx(\"td\", null, \"4\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"Supported fields and operators","type":"table","updated":null}}},"pageContext":{"id":"faadc0eb-4316-56af-b923-872ea5236500","fields":{"slug":"/understand-basics/load-balancing-rules/reference"},"frontmatter":{"title":"Supported fields and operators","type":"table","order":50,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"Supported fields and operators","depth":1}],"tableOfContents":{"items":[{"url":"#supported-fields-and-operators","title":"Supported fields and operators","items":[{"url":"#fields","title":"Fields"},{"url":"#operators","title":"Operators","items":[{"url":"#overview","title":"Overview"},{"url":"#comparison-operators","title":"Comparison operators"},{"url":"#logical-operators","title":"Logical operators"}]}]}]},"parent":{"modifiedTime":"2021-02-18","relativePath":"understand-basics/load-balancing-rules/reference.md"}}},"staticQueryHashes":["1302537747","2814688963","32046230","338033027","811020565"]}